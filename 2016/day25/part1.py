def cpy(x,y):
    if isinstance(y, int):
        return
    if isinstance(x, str):
        register[y] = register[x]
    elif isinstance(x, int):
        register[y] = x

def inc(x):
    register[x] += 1

def dec(x):
    register[x] -= 1

def jnz(x,y):
    global idx
    global register
    if (isinstance(x, int) and x == 0) or (not isinstance(x, int) and register[x] == 0):
        return
    if isinstance(y, str):
        y = register[y]
    idx += y - 1

def out(x):
    global register
    if isinstance(x, str):
        x = register[x]
    return x

with open("input.txt") as f:
    d = f.readlines()
d = [x.strip().split(' ') for x in d]
d = [[int(x) if any(map(str.isdigit, x)) else x for x in row] for row in d]

register = {'a':0,'b':0,'c':0,'d':0}
instruction = dict()
instruction["cpy"] = cpy
instruction["inc"] = inc
instruction["dec"] = dec
instruction["jnz"] = jnz
instruction["out"] = out

# at idx 10, if b is even, b will output 0 at idx 27;
#            if b is odd, b will output 1 at idx 27;
# at idx 28, if a is 0, idx returns to 9, and b will be set to (initial_a + 282*9)
# therefore (initial_a + 282*9) can be generated by starting at x=0 and alternately performing (x=2*x, x=2*x+1)
# e.g., 0,1,2,5,10,21,42,85,170,341,682,1365,2730,...
# the first number > 282*9 is 2730 => initial_a = 2730 - 282*9 = 192

# Sanity

# idx = 0
# s = []
# end_transmission = False
# transmission_len = 0
# 
# register['a'] = 192
# while not end_transmission:
#     if d[idx][0] == "out":
#         s.append(instruction[d[idx][0]](*d[idx][1:]))
#         transmission_len += 1
#         if transmission_len > 1000:
#             end_transmission = True
#     else:
#         instruction[d[idx][0]](*d[idx][1:])
#     idx += 1
# print(s)

a = 0
i = 0
seed = d[1][1] * d[2][1]
while a < seed:
    if i % 2 == 0:
        a += a
    else:
        a += a + 1
    i += 1
print(a - seed)